.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VMIPSTOOL 1"
.TH VMIPSTOOL 1 "2018-08-20" "vmips 1.5.1" "VMIPS Programmer's Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
vmipstool \- VMIPS front end for common programming tasks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-compile [ FLAGS ]
\&            FILE.c \-o FILE.o
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-preprocess [ FLAGS ] FILE
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-assemble [ FLAGS ]
\&            FILE.s \-o FILE.o
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] [ \-\-ld\-script=T ] \-\-link
\&            [ FLAGS ] FILE1.o ... FILEn.o \-o PROG
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-make\-rom PROG PROG.rom
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-disassemble\-rom PROG.rom
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-disassemble\-word PC INSTR
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-disassemble PROG (or FILE.o)
\&        vmipstool [ \-\-verbose ] [ \-\-dry\-run ] \-\-swap\-words INPUT OUTPUT
\&        vmipstool \-\-help
\&        vmipstool \-\-version
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBvmipstool\fR is intended to be a friendly front-end to the process
of compiling, linking, and assembling code for \s-1VMIPS\s0 using the \s-1GNU\s0 Compiler
Collection (\s-1GCC\s0) and \s-1GNU\s0 Binutils.
.PP
Note that you do not need to use \fBvmipstool\fR, or even \s-1GCC,\s0 to compile
programs for \s-1VMIPS\s0; you can use any \s-1MIPS\s0 compiler and assembler you have handy.
.SH "OPTIONS"
.IX Header "OPTIONS"
This is what the different command line options mean:
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display this help message and exit.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Display the version of vmipstool and exit.
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
Echo commands as they are run.
.IP "\fB\-\-dry\-run\fR" 4
.IX Item "--dry-run"
Don't actually run anything; use with \-\-verbose.
.IP "\fB\-\-ld\-script=T\fR" 4
.IX Item "--ld-script=T"
Use T as the linker script (instead of default script); use with \-\-link.
.IP "\fB\-\-compile\fR" 4
.IX Item "--compile"
Compile C code.  The remainder of the command   
line must consist of arguments to the \s-1GNU C\s0 compiler.
.IP "\fB\-\-preprocess\fR" 4
.IX Item "--preprocess"
Preprocess C source code or assembly code. The remainder of the command   
line must consist of arguments to the \s-1GNU C\s0 preprocessor.
.IP "\fB\-\-assemble\fR" 4
.IX Item "--assemble"
Translate assembly code to object files. The remainder of the command   
line must consist of arguments to the \s-1GNU\s0 assembler.
.IP "\fB\-\-link\fR" 4
.IX Item "--link"
Link objects together to create an executable. The remainder of the command
line must consist of arguments to the \s-1GNU\s0 linker.
.IP "\fB\-\-make\-rom\fR" 4
.IX Item "--make-rom"
Write a program into a \s-1ROM\s0 file. The next 2 arguments are the executable and
the \s-1ROM\s0 file, respectively.
.IP "\fB\-\-disassemble\fR" 4
.IX Item "--disassemble"
Disassemble a relocatable object file (*.o file) or an executable.
.IP "\fB\-\-disassemble\-rom\fR" 4
.IX Item "--disassemble-rom"
Disassemble arbitrary data, possibly including \s-1ROM\s0 files. (More
information is available with \-\-disassemble, but it only works on programs
which have not been written into ROMs.)
.IP "\fB\-\-disassemble\-word\fR" 4
.IX Item "--disassemble-word"
Disassemble an instruction whose binary encoding is passed as a command-line
argument. Because instructions can have PC-relative immediate arguments, the
\&\s-1PC\s0 must also be specified.
.IP "\fB\-\-swap\-words\fR" 4
.IX Item "--swap-words"
Copy the input file to the output file, reversing the byte-order of each
32\-bit word in the process. This can be used to translate chunks of data
from big-endian to little-endian, or vice-versa.
.SH "FILES"
.IX Header "FILES"
Note that \fBvmipstool\fR consults your \fI/etc/vmipsrc\fR and
\&\fI~/.vmipsrc\fR to determine where the \s-1MIPS\s0 cross compiler, assembler,
and \fBobjdump\fR and \fBobjcopy\fR tools are.  If you install new
cross-tools, you should edit these configuration files to reflect the new
location of the \s-1MIPS\s0 tools, and to reflect their default endianness, by
changing the settings of \fBmipstoolprefix\fR and \fBbigendian\fR.
.SH "BUGS"
.IX Header "BUGS"
For instructions on reporting bugs, see
the \*(L"Reporting Bugs\*(R" appendix of the Info manual.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIvmips\fR\|(1), \fIas\fR\|(1), \fIld\fR\|(1), \fIgdb\fR\|(1), 
and the Info entries for \fIgcc\fR, \fIas\fR,
\&\fIld\fR, \fIbinutils\fR and \fIgdb\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
vmipstool was written by Brian Gaeke.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001, 2002, 2004, 2009, 2014 Brian R. Gaeke.
.PP
Permission is hereby granted, free of charge, to any person obtaining a
copy of this document (the \*(L"Document\*(R"), to deal in the Document without
restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of
the Document, and to permit persons to whom the Document is furnished
to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Document.
.PP
\&\s-1THE DOCUMENT IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE DOCUMENT OR THE USE OR OTHER DEALINGS IN THE
DOCUMENT.\s0
